{"version":3,"sources":["../src/Configuration.js"],"names":[],"mappings":";;AAAA,IAAI,IAAJ,CAAS;AACL,0BAAsB,IADjB;AAEL,uBAAmB;AAFd,CAAT;;AAKA,IAAI,OAAJ,CAAY,CAAC,8BAAD,EAAiC,iCAAjC,CAAZ,EACI,UAAS,aAAT,EAAwB,cAAxB,EAAwC;AACpC,QAAI,QAAJ,CAAa,8BAAb,EAA6C,YAAW;AACpD,YAAI,iBAAiB,EAAE,sBAAF,CAArB;AACA,YAAI,oBAAoB,SAApB,iBAAoB,CAAS,cAAT,EAAyB;AAC7C,gBAAI,SAAS,eAAe,SAAf,EAAb;AACA,gBAAI,YAAY,IAAI,aAAJ,GAAoB,OAApB,CAA4B,EAA5C;AACA,mBAAO,OAAO,UAAP,CAAkB,SAAlB,EAA6B,IAA7B,CAAkC,mBAAW;AAC5C;AACA,wBAAQ,QAAR,CAAiB,OAAjB,CAAyB,mBAAW;AAChC,sBAAE,aAAa,QAAQ,IAArB,GAA4B,WAA9B,EAA2C,IAA3C,CAAgD,OAAhD,EAAyD,QAAQ,IAAjE,EAAuE,QAAvE,CAAgF,cAAhF;;AAEA,4BAAQ,GAAR,CAAY,gBAAgB,QAAQ,IAApC;AACA,mCAAe,GAAf,CAAmB,SAAS,aAA5B;AACH,iBALD;;AAOA,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,EAAP;AACH,aAVE,EAWH,UAAS,KAAT,EAAgB;AACZ,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,CAAyC,MAAM,OAA/C,CAAP;AACH,aAbE,CAAP;AAeH,SAlBD;AAmBA,eAAO;AACH,kBAAM,cAAS,cAAT,EAAyB,0BAAzB,EAAqD;;AAEvD,oBAAI,WAAW,KAAK,KAAL,CAAW,eAAe,cAAf,CAA8B,IAAzC,CAAf;AACA,oBAAI,YAAY,SAAS,SAAzB,EAAoC;AAChC,mCAAe,GAAf,CAAmB,SAAS,SAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAO,kBAAkB,cAAlB,CAAP;AACH,aApBE;AAqBH,oBAAQ,kBAAW;AACf,oBAAI,iBAAiB;AACjB,0BAAM,KAAK,SAAL,CAAe;AACjB,mCAAW,eAAe,GAAf;AADM,qBAAf;AADW,iBAArB;AAKA,uBAAO,cAAc,uBAAd,CAAsC,KAAtC,CAA4C,cAA5C,CAAP;AACH;AA5BE,SAAP;AA8BH,KAnDD;AAoDA,QAAI,mBAAJ;AACH,CAvDL","file":"Configuration.js","sourcesContent":["VSS.init({\r\n    explicitNotifyLoaded: true,\r\n    usePlatformStyles: true\r\n});\r\n\r\nVSS.require([\"TFS/Dashboards/WidgetHelpers\", \"TFS/WorkItemTracking/RestClient\"],\r\n    function(WidgetHelpers, TFS_Wit_WebApi) {\r\n        VSS.register(\"LeadTimeMetric.Configuration\", function() {\r\n            var $queryDropdown = $(\"#query-path-dropdown\");\r\n            var getLeadTimeConfig = function(widgetSettings) {\r\n                var client = TFS_Wit_WebApi.getClient();\r\n                var projectId = VSS.getWebContext().project.id;\r\n                return client.getQueries(projectId).then(queries => {\r\n                        //Get query result\r\n                        queries.children.forEach(element => {\r\n                            $(\"<option>\" + element.path + \"</option>\").attr(\"value\", element.path).appendTo($queryDropdown);\r\n\r\n                            console.log(\"Querypath: \" + element.path);\r\n                            $queryDropdown.val(settings.queryDropdown)\r\n                        });\r\n\r\n                        return WidgetHelpers.WidgetStatusHelper.Success();\r\n                    },\r\n                    function(error) {\r\n                        return WidgetHelpers.WidgetStatusHelper.Failure(error.message);\r\n                    }\r\n                );\r\n            };\r\n            return {\r\n                load: function(widgetSettings, widgetConfigurationContext) {\r\n\r\n                    var settings = JSON.parse(widgetSettings.customSettings.data);\r\n                    if (settings && settings.queryPath) {\r\n                        $queryDropdown.val(settings.queryPath);\r\n                    }\r\n                    //Enable Live Preview\r\n                    // $queryDropdown.on(\"change\", function() {\r\n                    //     var customSettings = {\r\n                    //         data: JSON.stringify({\r\n                    //             queryPath: $queryDropdown.val()\r\n                    //         })\r\n                    //     };\r\n                    //     var eventName = WidgetHelpers.WidgetEvent.ConfigurationChange;\r\n                    //     var eventArgs = WidgetHelpers.WidgetEvent.Args(customSettings);\r\n                    //     widgetConfigurationContext.notify(eventName, eventArgs);\r\n                    // });\r\n                    //^^^^^^\r\n                    return getLeadTimeConfig(widgetSettings);\r\n                },\r\n                onSave: function() {\r\n                    var customSettings = {\r\n                        data: JSON.stringify({\r\n                            queryPath: $queryDropdown.val()\r\n                        })\r\n                    };\r\n                    return WidgetHelpers.WidgetConfigurationSave.Valid(customSettings);\r\n                }\r\n            }\r\n        });\r\n        VSS.notifyLoadSucceeded();\r\n    });"]}