{"version":3,"sources":["../src/Configuration.js"],"names":[],"mappings":";;AAAA,IAAI,IAAJ,CAAS;AACL,0BAAsB,IADjB;AAEL,uBAAmB;AAFd,CAAT;;AAKA,IAAI,OAAJ,CAAY,CAAC,8BAAD,EAAiC,iCAAjC,EAAoE,gCAApE,CAAZ,EACI,UAAS,aAAT,EAAwB,cAAxB,EAAwC,aAAxC,EAAuD;AACnD,QAAI,QAAJ,CAAa,8BAAb,EAA6C,YAAW;AACpD,YAAI,iBAAiB,EAAE,sBAAF,CAArB;;AAGA;;AAIA;AACA,eAAO;AACH,kBAAM,cAAS,cAAT,EAAyB,0BAAzB,EAAqD;;AAEvD,oBAAI,WAAW,KAAK,KAAL,CAAW,eAAe,cAAf,CAA8B,IAAzC,CAAf;AACA,oBAAI,YAAY,SAAS,SAAzB,EAAoC;AAChC,mCAAe,GAAf,CAAmB,SAAS,SAA5B;AACH;;AAED,oBAAI,SAAS,eAAe,SAAf,EAAb;AACA,oBAAI,YAAY,IAAI,aAAJ,GAAoB,OAApB,CAA4B,EAA5C;AACA,uBAAO,QAAP,CAAgB,SAAhB,EAA2B,gBAA3B,EAA6C,cAAc,WAAd,CAA0B,IAAvE,EAA6E,CAA7E,EAAgF,IAAhF,CAAqF,mBAAW;AAC5F;AACA,4BAAQ,GAAR,CAAY,YAAY,QAAQ,KAAhC;AACA,4BAAQ,GAAR,CAAY,eAAe,QAAQ,QAAnC;AACA,4BAAQ,GAAR,CAAY,kBAAkB,QAAQ,WAAtC;AACA,4BAAQ,GAAR,CAAY,gBAAgB,QAAQ,IAApC;;AAEA,4BAAQ,OAAR,CAAgB,mBAAW;AACvB,0BAAE,aAAa,QAAQ,IAArB,GAA4B,WAA9B,EAA2C,IAA3C,CAAgD,OAAhD,EAAyD,QAAQ,IAAjE,EAAuE,QAAvE,CAAgF,cAAhF;AACA,gCAAQ,GAAR,CAAY,eAAe,QAAQ,QAAnC;AACA,gCAAQ,GAAR,CAAY,kBAAkB,QAAQ,WAAtC;AACA,gCAAQ,GAAR,CAAY,gBAAgB,QAAQ,IAApC;AACA,uCAAe,GAAf,CAAmB,SAAS,aAA5B;AACH,qBAND;AAOH,iBAdD;;AAgBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,EAAP;AACH,aA9CE;AA+CH,oBA/CG,qBA+CM,KA/CN,EA+Ca;AACZ,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,CAAyC,MAAM,OAA/C,CAAP;AACH,aAjDE;;;AAoDH,oBAAQ,kBAAW;AACf,oBAAI,iBAAiB;AACjB,0BAAM,KAAK,SAAL,CAAe;AACjB,mCAAW,eAAe,GAAf;AADM,qBAAf;AADW,iBAArB;AAKA,uBAAO,cAAc,uBAAd,CAAsC,KAAtC,CAA4C,cAA5C,CAAP;AACH;AA3DE,SAAP;AA6DH,KAtED;AAuEA,QAAI,mBAAJ;AACH,CA1EL","file":"Configuration.js","sourcesContent":["VSS.init({\r\n    explicitNotifyLoaded: true,\r\n    usePlatformStyles: true\r\n});\r\n\r\nVSS.require([\"TFS/Dashboards/WidgetHelpers\", \"TFS/WorkItemTracking/RestClient\", \"TFS/WorkItemTracking/Contracts\"],\r\n    function(WidgetHelpers, TFS_Wit_WebApi, TFS_contracts) {\r\n        VSS.register(\"LeadTimeMetric.Configuration\", function() {\r\n            var $queryDropdown = $(\"#query-path-dropdown\");\r\n\r\n\r\n            // var getLeadTimeConfig = function(widgetSettings) {\r\n\r\n\r\n\r\n            // };\r\n            return {\r\n                load: function(widgetSettings, widgetConfigurationContext) {\r\n\r\n                    var settings = JSON.parse(widgetSettings.customSettings.data);\r\n                    if (settings && settings.queryPath) {\r\n                        $queryDropdown.val(settings.queryPath);\r\n                    }\r\n\r\n                    var client = TFS_Wit_WebApi.getClient();\r\n                    var projectId = VSS.getWebContext().project.id;\r\n                    client.getQuery(projectId, \"Shared Queries\", TFS_contracts.QueryExpand.None, 2).then(queries => {\r\n                        //Get query result\r\n                        console.log(\"Count: \" + queries.count);\r\n                        console.log(\"Children: \" + queries.children);\r\n                        console.log(\"hasChildren: \" + queries.hasChildren);\r\n                        console.log(\"Querypath: \" + queries.path);\r\n\r\n                        queries.forEach(element => {\r\n                            $(\"<option>\" + element.path + \"</option>\").attr(\"value\", element.path).appendTo($queryDropdown);\r\n                            console.log(\"Children: \" + element.children);\r\n                            console.log(\"hasChildren: \" + element.hasChildren);\r\n                            console.log(\"Querypath: \" + element.path);\r\n                            $queryDropdown.val(settings.queryDropdown)\r\n                        });\r\n                    });\r\n\r\n                    //        return WidgetHelpers.WidgetStatusHelper.Success();\r\n                    //     },\r\n                    //     function(error) {\r\n                    //         return WidgetHelpers.WidgetStatusHelper.Failure(error.message);\r\n                    //     }\r\n                    // );\r\n\r\n                    //Enable Live Preview\r\n                    // $queryDropdown.on(\"change\", function() {\r\n                    //     var customSettings = {\r\n                    //         data: JSON.stringify({\r\n                    //             queryPath: $queryDropdown.val()\r\n                    //         })\r\n                    //     };\r\n                    //     var eventName = WidgetHelpers.WidgetEvent.ConfigurationChange;\r\n                    //     var eventArgs = WidgetHelpers.WidgetEvent.Args(customSettings);\r\n                    //     widgetConfigurationContext.notify(eventName, eventArgs);\r\n                    // });\r\n                    //^^^^^^\r\n                    return WidgetHelpers.WidgetStatusHelper.Success();\r\n                },\r\n                function(error) {\r\n                    return WidgetHelpers.WidgetStatusHelper.Failure(error.message);\r\n                },\r\n\r\n\r\n                onSave: function() {\r\n                    var customSettings = {\r\n                        data: JSON.stringify({\r\n                            queryPath: $queryDropdown.val()\r\n                        })\r\n                    };\r\n                    return WidgetHelpers.WidgetConfigurationSave.Valid(customSettings);\r\n                }\r\n            }\r\n        });\r\n        VSS.notifyLoadSucceeded();\r\n    });"]}