{"version":3,"sources":["../src/Configuration.js"],"names":[],"mappings":";;AAAA,IAAI,IAAJ,CAAS;AACL,0BAAsB,IADjB;AAEL,uBAAmB;AAFd,CAAT;;AAKA,IAAI,OAAJ,CAAY,CAAC,8BAAD,EAAiC,iCAAjC,EAAoE,gCAApE,CAAZ,EACI,UAAS,aAAT,EAAwB,cAAxB,EAAwC,aAAxC,EAAuD;AACnD,QAAI,QAAJ,CAAa,8BAAb,EAA6C,YAAW;AACpD,YAAI,iBAAiB,EAAE,sBAAF,CAArB;;AAEA,eAAO;AACH,kBAAM,cAAS,cAAT,EAAyB,0BAAzB,EAAqD;;AAEvD,oBAAI,WAAW,KAAK,KAAL,CAAW,eAAe,cAAf,CAA8B,IAAzC,CAAf;AACA,oBAAI,YAAY,SAAS,SAAzB,EAAoC;AAChC,mCAAe,GAAf,CAAmB,SAAS,SAA5B;AACH;;AAED,oBAAI,SAAS,eAAe,SAAf,EAAb;AACA,oBAAI,YAAY,IAAI,aAAJ,GAAoB,OAApB,CAA4B,EAA5C;AACA,uBAAO,QAAP,CAAgB,SAAhB,EAA2B,gBAA3B,EAA6C,cAAc,WAAd,CAA0B,IAAvE,EAA6E,CAA7E,EAAgF,IAAhF,CAAqF,mBAAW;AAC5F;AACA,4BAAQ,QAAR,CAAiB,OAAjB,CAAyB,2BAAmB;AACxC,4BAAI,gBAAgB,WAAhB,IAA+B,SAAnC,EAA8C;AAC1C,8BAAE,aAAa,gBAAgB,IAA7B,GAAoC,WAAtC,EAAmD,IAAnD,CAAwD,OAAxD,EAAiE,gBAAgB,IAAjF,EAAuF,QAAvF,CAAgG,cAAhG;AACA,2CAAe,GAAf,CAAmB,SAAS,aAA5B;AACH;AACD,4BAAI,gBAAgB,WAAhB,IAA+B,IAAnC,EAAyC;AACrC,4CAAgB,QAAhB,CAAyB,OAAzB,CAAiC,0BAAkB;AAC/C,oCAAI,eAAe,WAAf,IAA8B,SAAlC,EAA6C;AACzC,sCAAE,aAAa,eAAe,IAA5B,GAAmC,WAArC,EAAkD,IAAlD,CAAuD,OAAvD,EAAgE,eAAe,IAA/E,EAAqF,QAArF,CAA8F,cAA9F;AACA,mDAAe,GAAf,CAAmB,SAAS,aAA5B;AACH;AACJ,6BALD;AAMH;AACJ,qBAbD;AAcH,iBAhBD;AAiBA;AACA,+BAAe,EAAf,CAAkB,QAAlB,EAA4B,YAAW;AACnC,wBAAI,iBAAiB;AACjB,8BAAM,KAAK,SAAL,CAAe;AACjB,uCAAW,eAAe,GAAf;AADM,yBAAf;AADW,qBAArB;AAKA,4BAAQ,GAAR,CAAY,UAAZ;AACA,wBAAI,YAAY,cAAc,WAAd,CAA0B,mBAA1C;AACA,wBAAI,YAAY,cAAc,WAAd,CAA0B,IAA1B,CAA+B,cAA/B,CAAhB;AACA,+CAA2B,MAA3B,CAAkC,SAAlC,EAA6C,SAA7C;AACH,iBAVD;AAWA;AACA,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,EAAP;AACH,aAzCE;AA0CH,oBA1CG,qBA0CM,KA1CN,EA0Ca;AACZ,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,CAAyC,MAAM,OAA/C,CAAP;AACH,aA5CE;;AA6CH,oBAAQ,kBAAW;AACf,oBAAI,iBAAiB;AACjB,0BAAM,KAAK,SAAL,CAAe;AACjB,mCAAW,eAAe,GAAf;AADM,qBAAf;AADW,iBAArB;AAKA,uBAAO,cAAc,uBAAd,CAAsC,KAAtC,CAA4C,cAA5C,CAAP;AACH;AApDE,SAAP;AAsDH,KAzDD;AA0DA,QAAI,mBAAJ;AACH,CA7DL","file":"Configuration.js","sourcesContent":["VSS.init({\r\n    explicitNotifyLoaded: true,\r\n    usePlatformStyles: true\r\n});\r\n\r\nVSS.require([\"TFS/Dashboards/WidgetHelpers\", \"TFS/WorkItemTracking/RestClient\", \"TFS/WorkItemTracking/Contracts\"],\r\n    function(WidgetHelpers, TFS_Wit_WebApi, TFS_contracts) {\r\n        VSS.register(\"LeadTimeMetric.Configuration\", function() {\r\n            var $queryDropdown = $(\"#query-path-dropdown\");\r\n\r\n            return {\r\n                load: function(widgetSettings, widgetConfigurationContext) {\r\n\r\n                    var settings = JSON.parse(widgetSettings.customSettings.data);\r\n                    if (settings && settings.queryPath) {\r\n                        $queryDropdown.val(settings.queryPath);\r\n                    }\r\n\r\n                    var client = TFS_Wit_WebApi.getClient();\r\n                    var projectId = VSS.getWebContext().project.id;\r\n                    client.getQuery(projectId, \"Shared Queries\", TFS_contracts.QueryExpand.None, 2).then(queries => {\r\n                        //Get query result\r\n                        queries.children.forEach(rootFolderQuery => {\r\n                            if (rootFolderQuery.hasChildren == undefined) {\r\n                                $(\"<option>\" + rootFolderQuery.path + \"</option>\").attr(\"value\", rootFolderQuery.path).appendTo($queryDropdown);\r\n                                $queryDropdown.val(settings.queryDropdown);\r\n                            }\r\n                            if (rootFolderQuery.hasChildren == true) {\r\n                                rootFolderQuery.children.forEach(subFolderQuery => {\r\n                                    if (subFolderQuery.hasChildren == undefined) {\r\n                                        $(\"<option>\" + subFolderQuery.path + \"</option>\").attr(\"value\", subFolderQuery.path).appendTo($queryDropdown);\r\n                                        $queryDropdown.val(settings.queryDropdown);\r\n                                    }\r\n                                });\r\n                            };\r\n                        });\r\n                    });\r\n                    //Enable Live Preview\r\n                    $queryDropdown.on(\"change\", function() {\r\n                        var customSettings = {\r\n                            data: JSON.stringify({\r\n                                queryPath: $queryDropdown.val()\r\n                            })\r\n                        };\r\n                        console.log(\"onchange\");\r\n                        var eventName = WidgetHelpers.WidgetEvent.ConfigurationChange;\r\n                        var eventArgs = WidgetHelpers.WidgetEvent.Args(customSettings);\r\n                        widgetConfigurationContext.notify(eventName, eventArgs);\r\n                    });\r\n                    //^^^^^^\r\n                    return WidgetHelpers.WidgetStatusHelper.Success();\r\n                },\r\n                function(error) {\r\n                    return WidgetHelpers.WidgetStatusHelper.Failure(error.message);\r\n                },\r\n                onSave: function() {\r\n                    var customSettings = {\r\n                        data: JSON.stringify({\r\n                            queryPath: $queryDropdown.val()\r\n                        })\r\n                    };\r\n                    return WidgetHelpers.WidgetConfigurationSave.Valid(customSettings);\r\n                }\r\n            }\r\n        });\r\n        VSS.notifyLoadSucceeded();\r\n    });"]}