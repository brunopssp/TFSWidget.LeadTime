{"version":3,"sources":["Temp.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,cAAc,IAAlB;AACA,IAAI,IAAJ,CAAS;AACL,0BAAsB,IADjB;AAEL,uBAAmB;AAFd,CAAT;;AAKA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC;AAC/B;AACA,QAAI,UAAU,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA/B;;AAEA;AACA,QAAI,WAAW,MAAM,OAAN,EAAf;AACA,QAAI,WAAW,MAAM,OAAN,EAAf;;AAEA;AACA,QAAI,gBAAgB,WAAW,QAA/B;;AAEA;AACA,WAAO,KAAK,KAAL,CAAW,gBAAgB,OAA3B,CAAP;AACH;;AAED,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;;AAEhC,QAAI,cAAc,SAAS,IAAT,CAAc,4BAAoB;AAChD,eAAO,iBAAiB,MAAjB,CAAwB,cAAxB,KAA2C,UAAlD;AACH,KAFiB,CAAlB;;AAIA,QAAI,UAAU,SAAS,IAAT,CAAc,4BAAoB;AAC5C,eAAO,iBAAiB,MAAjB,CAAwB,cAAxB,KAA2C,MAAlD;AACH,KAFa,CAAd;;AAIA,QAAI,eAAe,IAAI,IAAJ,CAAS,YAAY,MAAZ,CAAmB,oBAAnB,CAAT,CAAnB;AACA,QAAI,WAAW,IAAI,IAAJ,CAAS,QAAQ,MAAR,CAAe,oBAAf,CAAT,CAAf;;AAEA,gBAAY,IAAZ,CAAiB,YAAY,YAAZ,EAA0B,QAA1B,CAAjB;;AAEA,QAAI,MAAM,CAAV;AACA,gBAAY,OAAZ,CAAoB,gBAAQ;AACxB,eAAO,IAAP;AACH,KAFD;;AAIA,QAAI,QAAQ,EAAE,MAAF,CAAZ;AACA,UAAM,MAAN,CAAa,EAAE,MAAF,EAAU,IAAV,CAAe,2BAA4B,MAAM,YAAY,MAA7D,CAAb;;AAEA,MAAE,uBAAF,EAA2B,KAA3B,GAAmC,MAAnC,CAA0C,KAA1C;AACH;;AAED,IAAI,OAAJ,CAAY,CAAC,8BAAD,EAAiC,iCAAjC,CAAZ,EACI,UAAS,aAAT,EAAwB,cAAxB,EAAwC;AACpC,kBAAc,mBAAd;AACA,QAAI,QAAJ,CAAa,mBAAb,EAAkC,YAAW;AACzC,YAAI,cAAc,SAAd,WAAc,CAAS,cAAT,EAAyB;AACvC;AACA,gBAAI,SAAS,eAAe,SAAf,EAAb;AACA,gBAAI,YAAY,IAAI,aAAJ,GAAoB,OAApB,CAA4B,EAA5C;;AAMA;AACA,mBAAO,OAAO,QAAP,CAAgB,SAAhB,EAA2B,yBAA3B,EAAsD,IAAtD,CAA2D,iBAAS;AACnE,8BAAc,EAAd;AACA;AACA,uBAAO,SAAP,CAAiB,MAAM,EAAvB,EAA2B,IAA3B,CAAgC,uBAAe;AAC3C;AACA,gCAAY,SAAZ,CAAsB,OAAtB,CAA8B,oBAAY;AACtC,+BAAO,YAAP,CAAoB,SAAS,EAA7B,EAAiC,IAAjC,CAAsC,gBAAtC;AACH,qBAFD;AAGH,iBALD;AAMA,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,EAAP;AACH,aAVE,EAWH,UAAS,KAAT,EAAgB;AACZ,uBAAO,cAAc,kBAAd,CAAiC,OAAjC,CAAyC,MAAM,OAA/C,CAAP;AACH,aAbE,CAAP;AAcH,SAxBD;;AAkCA,eAAO;AACH,kBAAM,cAAS,cAAT,EAAyB;AAC3B,oBAAI,SAAS,EAAE,UAAF,CAAb;AACA,uBAAO,IAAP,CAAY,aAAZ;;AAEA,uBAAO,YAAY,cAAZ,CAAP;AACH;AANE,SAAP;AAQH,KA3CD;AA4CA,QAAI,mBAAJ;AACH,CAhDL","file":"KpiAgile.js","sourcesContent":["\"use strict\";\r\nvar intLeadTime = null;\r\nVSS.init({\r\n    explicitNotifyLoaded: true,\r\n    usePlatformStyles: true\r\n});\r\n\r\nfunction DaysBetween(date1, date2) {\r\n    //Get 1 day in milliseconds\r\n    var one_day = 1000 * 60 * 60 * 24;\r\n\r\n    // Convert both dates to milliseconds\r\n    var date1_ms = date1.getTime();\r\n    var date2_ms = date2.getTime();\r\n\r\n    // Calculate the difference in milliseconds\r\n    var difference_ms = date2_ms - date1_ms;\r\n\r\n    // Convert back to days and return\r\n    return Math.round(difference_ms / one_day);\r\n}\r\n\r\nfunction ProcessRevisions(workItem) {\r\n\r\n    var RevApproved = workItem.find(workItemRevision => {\r\n        return workItemRevision.fields[\"System.State\"] == \"Approved\";\r\n    });\r\n\r\n    var RevDone = workItem.find(workItemRevision => {\r\n        return workItemRevision.fields[\"System.State\"] == \"Done\";\r\n    });\r\n\r\n    var dateApproved = new Date(RevApproved.fields[\"System.ChangedDate\"]);\r\n    var dateDone = new Date(RevDone.fields[\"System.ChangedDate\"]);\r\n\r\n    intLeadTime.push(DaysBetween(dateApproved, dateDone));\r\n\r\n    var sum = 0;\r\n    intLeadTime.forEach(item => {\r\n        sum += item;\r\n    });\r\n\r\n    var $list = $('<ul>');\r\n    $list.append($('<li>').text(\"Lead Time Avg (Days): \" + (sum / intLeadTime.length)));\r\n\r\n    $('#query-info-container').empty().append($list);\r\n}\r\n\r\nVSS.require([\"TFS/Dashboards/WidgetHelpers\", \"TFS/WorkItemTracking/RestClient\"],\r\n    function(WidgetHelpers, TFS_Wit_WebApi) {\r\n        WidgetHelpers.IncludeWidgetStyles();\r\n        VSS.register(\"HelloWorldWidget2\", function() {\r\n            var getLeadTime = function(widgetSettings) {\r\n                // Get a WIT client to make REST calls to VSTS\r\n                var client = TFS_Wit_WebApi.getClient();\r\n                var projectId = VSS.getWebContext().project.id;\r\n\r\n\r\n\r\n\r\n\r\n                //Get a tfs query to get it's id\r\n                return client.getQuery(projectId, \"Shared Queries/Feedback\").then(query => {\r\n                        intLeadTime = [];\r\n                        //Get query result\r\n                        client.queryById(query.id).then(resultQuery => {\r\n                            //ForEach workItem in query, get the respective Revision\r\n                            resultQuery.workItems.forEach(workItem => {\r\n                                client.getRevisions(workItem.id).then(ProcessRevisions);\r\n                            });\r\n                        });\r\n                        return WidgetHelpers.WidgetStatusHelper.Success();\r\n                    },\r\n                    function(error) {\r\n                        return WidgetHelpers.WidgetStatusHelper.Failure(error.message);\r\n                    });\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            return {\r\n                load: function(widgetSettings) {\r\n                    var $title = $('h2.title');\r\n                    $title.text('Hello World');\r\n\r\n                    return getLeadTime(widgetSettings);\r\n                }\r\n            }\r\n        });\r\n        VSS.notifyLoadSucceeded();\r\n    });"]}